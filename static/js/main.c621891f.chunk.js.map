{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onclick","counter","counter1","state","c1","setState","counter2","c2","counter3","c3","className","id","this","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qMAwEeA,G,wDAjEb,WAAYC,GACX,IAAD,8BACE,cAAMA,IASVC,QAAQ,SAACC,GACP,GAAa,OAAVA,EACD,CACA,IAAMC,EAAS,EAAKC,MAAMC,GAAG,EAC7B,EAAKC,SAAS,CACdD,GAAGF,SAGA,GAAa,OAAVD,EACN,CACA,IAAMK,EAAS,EAAKH,MAAMI,GAAG,EAC7B,EAAKF,SAAS,CACdE,GAAGD,QAID,CACF,IAAME,EAAS,EAAKL,MAAMM,GAAG,EAC7B,EAAKJ,SAAS,CACdI,GAAGD,MA3BH,EAAKL,MAAM,CACTC,GAAG,EACHG,GAAG,EACHE,GAAG,GALP,E,qDAoCC,IAAD,OACE,OACE,oCACE,yBAAKC,UAAU,WACb,gCACE,wBAAIC,GAAG,YAAP,wBACA,yBAAKD,UAAU,cACb,wBAAIC,GAAG,OAAOC,KAAKT,MAAMC,IACzB,mCACA,4BAAQS,QAAS,kBAAI,EAAKb,QAAQ,QAAlC,eAEF,yBAAKU,UAAU,cACb,wBAAIC,GAAG,OAAOC,KAAKT,MAAMI,IACzB,sCACA,4BAAQM,QAAS,kBAAI,EAAKb,QAAQ,QAAlC,eAEF,yBAAKU,UAAU,cACb,wBAAIC,GAAG,OAAOC,KAAKT,MAAMM,IACzB,kCACA,4BAAQI,QAAS,kBAAI,EAAKb,QAAQ,QAAlC,sB,GA1DIc,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c621891f.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport \"./App.css\";\n\n\n\nclass App extends Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.state={\n      c1:0,\n      c2:0,\n      c3:0\n       \n    }\n  }\n\nonclick=(counter)=>{\n  if(counter==='c1')\n    {\n    const counter1=this.state.c1+1;\n    this.setState({\n    c1:counter1\n  });\n  }\n  else if(counter==='c2')\n    {\n    const counter2=this.state.c2+1;\n    this.setState({\n    c2:counter2\n  });\n  }\n  else\n      {\n    const counter3=this.state.c3+1;\n    this.setState({\n    c3:counter3\n  });\n  }\n\n\n}\n  render()\n  {\n    return(\n      <>\n        <div className=\"maindiv\">\n          <center>\n            <h1 id=\"mainhead\">Vote Your Language! </h1>\n            <div className=\"firstchild\">\n              <h1 id=\"h11\">{this.state.c1}</h1>\n              <h2>php</h2>\n              <button onClick={()=>this.onclick(\"c1\")}>click here</button>\n            </div>\n            <div className=\"firstchild\">\n              <h1 id=\"h12\">{this.state.c2}</h1>\n              <h2>Python</h2>\n              <button onClick={()=>this.onclick(\"c2\")}>click here</button>\n            </div>\n            <div className=\"firstchild\">\n              <h1 id=\"h13\">{this.state.c3}</h1>\n              <h2>Go</h2>\n              <button onClick={()=>this.onclick(\"c3\")}>click here</button>\n            </div>\n          </center>\n        </div>\n      </>\n      )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}